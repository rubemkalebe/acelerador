$date
  Fri Apr  1 22:19:11 2016
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 32 ! s_input_alu_1a[31:0] $end
$var reg 32 " s_input_alu_1b[31:0] $end
$var reg 32 # s_input_alu_2a[31:0] $end
$var reg 32 $ s_input_alu_2b[31:0] $end
$var reg 32 % s_input_alu_3a[31:0] $end
$var reg 32 & s_input_alu_3b[31:0] $end
$var reg 4 ' s_opcode_alu_1[3:0] $end
$var reg 4 ( s_opcode_alu_2[3:0] $end
$var reg 4 ) s_opcode_alu_3[3:0] $end
$var reg 32 * s_output_alu_1[31:0] $end
$var reg 32 + s_output_alu_2[31:0] $end
$var reg 32 , s_output_alu_3[31:0] $end
$var reg 1 - s_zero_alu_1 $end
$var reg 1 . s_zero_alu_2 $end
$var reg 1 / s_zero_alu_3 $end
$var reg 32 0 s_input_mul_1a[31:0] $end
$var reg 32 1 s_input_mul_1b[31:0] $end
$var reg 1 2 s_op_mul_1 $end
$var reg 64 3 s_output_mul_1[63:0] $end
$scope module basic_unit_0 $end
$var reg 32 4 input_alu_1a[31:0] $end
$var reg 32 5 input_alu_1b[31:0] $end
$var reg 32 6 input_alu_2a[31:0] $end
$var reg 32 7 input_alu_2b[31:0] $end
$var reg 32 8 input_alu_3a[31:0] $end
$var reg 32 9 input_alu_3b[31:0] $end
$var reg 4 : opcode_alu_1[3:0] $end
$var reg 4 ; opcode_alu_2[3:0] $end
$var reg 4 < opcode_alu_3[3:0] $end
$var reg 32 = output_alu_1[31:0] $end
$var reg 32 > output_alu_2[31:0] $end
$var reg 32 ? output_alu_3[31:0] $end
$var reg 1 @ zero_alu_1 $end
$var reg 1 A zero_alu_2 $end
$var reg 1 B zero_alu_3 $end
$var reg 32 C input_mul_1a[31:0] $end
$var reg 32 D input_mul_1b[31:0] $end
$var reg 1 E op_mul_1 $end
$var reg 64 F output_mul_1[63:0] $end
$scope module alu1 $end
$var reg 32 G a[31:0] $end
$var reg 32 H b[31:0] $end
$var reg 4 I opcode[3:0] $end
$var reg 1 J zero $end
$var reg 32 K x[31:0] $end
$var reg 32 L aux[31:0] $end
$upscope $end
$scope module alu2 $end
$var reg 32 M a[31:0] $end
$var reg 32 N b[31:0] $end
$var reg 4 O opcode[3:0] $end
$var reg 1 P zero $end
$var reg 32 Q x[31:0] $end
$var reg 32 R aux[31:0] $end
$upscope $end
$scope module alu3 $end
$var reg 32 S a[31:0] $end
$var reg 32 T b[31:0] $end
$var reg 4 U opcode[3:0] $end
$var reg 1 V zero $end
$var reg 32 W x[31:0] $end
$var reg 32 X aux[31:0] $end
$upscope $end
$scope module mul1 $end
$var reg 32 Y a[31:0] $end
$var reg 32 Z b[31:0] $end
$var reg 1 [ op $end
$var reg 64 \ x[63:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00000000000010000001110110011000 !
b00000101101111111001101011100001 "
b11111111111101111110001001101000 #
b00000101101111111001101011100001 $
b00000000000010000001110110011000 %
b00000101101111111001101011100001 &
b1000 '
b1001 (
b1100 )
b00000101110001111011100001111001 *
b11111010001110000100011110000111 +
b11111010010010001000001010110111 ,
Z-
Z.
1/
b00000000000010000100001111110111 0
b00000000000000000111110110010001 1
12
b0000000000000000000000000000010000001101110111100001100111100111 3
b00000000000010000001110110011000 4
b00000101101111111001101011100001 5
b11111111111101111110001001101000 6
b00000101101111111001101011100001 7
b00000000000010000001110110011000 8
b00000101101111111001101011100001 9
b1000 :
b1001 ;
b1100 <
b00000101110001111011100001111001 =
b11111010001110000100011110000111 >
b11111010010010001000001010110111 ?
Z@
ZA
1B
b00000000000010000100001111110111 C
b00000000000000000111110110010001 D
1E
b0000000000000000000000000000010000001101110111100001100111100111 F
b00000000000010000001110110011000 G
b00000101101111111001101011100001 H
b1000 I
ZJ
b00000101110001111011100001111001 K
b00000101110001111011100001111001 L
b11111111111101111110001001101000 M
b00000101101111111001101011100001 N
b1001 O
ZP
b11111010001110000100011110000111 Q
b11111010001110000100011110000111 R
b00000000000010000001110110011000 S
b00000101101111111001101011100001 T
b1100 U
1V
b11111010010010001000001010110111 W
b11111010010010001000001010110111 X
b00000000000010000100001111110111 Y
b00000000000000000111110110010001 Z
1[
b0000000000000000000000000000010000001101110111100001100111100111 \
#1000000
b00000000000000000000000000010111 !
b00000000000000000000000000000001 "
b00000000000000000000000000010111 #
b00000000000000000000000000000001 $
b00000101101111111001101011100001 %
b00000000000010000001110110011000 &
b0100 '
b0101 (
b1000 )
b00000000000000000000000000101110 *
b00000000000000000000000000001011 +
b00000101110001111011100001111001 ,
Z/
b11111111111101111011110000001001 0
b11111111111111111000001001101111 1
02
b00000000000000000000000000010111 4
b00000000000000000000000000000001 5
b00000000000000000000000000010111 6
b00000000000000000000000000000001 7
b00000101101111111001101011100001 8
b00000000000010000001110110011000 9
b0100 :
b0101 ;
b1000 <
b00000000000000000000000000101110 =
b00000000000000000000000000001011 >
b00000101110001111011100001111001 ?
ZB
b11111111111101111011110000001001 C
b11111111111111111000001001101111 D
0E
b00000000000000000000000000010111 G
b00000000000000000000000000000001 H
b0100 I
b00000000000000000000000000101110 K
b00000000000000000000000000101110 L
b00000000000000000000000000010111 M
b00000000000000000000000000000001 N
b0101 O
b00000000000000000000000000001011 Q
b00000000000000000000000000001011 R
b00000101101111111001101011100001 S
b00000000000010000001110110011000 T
b1000 U
ZV
b00000101110001111011100001111001 W
b00000101110001111011100001111001 X
b11111111111101111011110000001001 Y
b11111111111111111000001001101111 Z
0[
#2000000
